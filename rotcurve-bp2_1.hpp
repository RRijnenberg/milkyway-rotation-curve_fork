
// Code generated by stanc v2.31.0
#include <stan/model/model_header.hpp>
namespace rotcurve_bp2_1_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 134> locations_array__ = 
{" (found before start of program)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 109, column 2 to column 25)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 110, column 2 to column 15)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 111, column 2 to column 18)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 112, column 2 to column 18)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 113, column 2 to column 18)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 114, column 2 to column 15)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 115, column 2 to column 14)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 119, column 2 to column 30)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 120, column 2 to column 21)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 121, column 2 to column 30)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 123, column 2 to column 24)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 124, column 2 to column 24)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 125, column 2 to column 23)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 126, column 2 to column 18)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 127, column 2 to column 18)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 128, column 2 to column 18)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 129, column 2 to column 24)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 130, column 2 to column 24)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 131, column 2 to column 24)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 134, column 4 to column 54)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 135, column 4 to column 54)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 136, column 4 to column 54)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 137, column 4 to column 54)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 138, column 4 to column 66)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 133, column 17 to line 139, column 3)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 133, column 2 to line 139, column 3)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 141, column 2 to column 160)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 159, column 2 to column 21)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 160, column 2 to column 21)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 161, column 2 to column 20)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 164, column 4 to column 53)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 165, column 4 to column 29)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 166, column 4 to column 29)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 163, column 17 to line 167, column 3)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 163, column 2 to line 167, column 3)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 145, column 2 to column 59)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 146, column 2 to column 48)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 147, column 2 to column 69)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 148, column 2 to column 69)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 149, column 2 to column 69)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 150, column 2 to column 55)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 151, column 2 to column 54)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 154, column 4 to column 51)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 153, column 17 to line 155, column 3)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 153, column 2 to line 155, column 3)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 46, column 2 to column 17)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 47, column 9 to column 10)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 47, column 2 to column 18)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 48, column 9 to column 10)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 48, column 2 to column 18)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 49, column 9 to column 10)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 49, column 2 to column 20)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 50, column 9 to column 10)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 50, column 2 to column 24)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 51, column 9 to column 10)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 51, column 2 to column 20)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 52, column 9 to column 10)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 52, column 2 to column 24)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 53, column 9 to column 10)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 53, column 2 to column 25)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 54, column 9 to column 10)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 54, column 2 to column 20)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 55, column 2 to column 12)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 56, column 2 to column 12)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 60, column 2 to column 18)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 62, column 2 to column 33)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 63, column 2 to column 31)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 64, column 2 to column 27)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 65, column 2 to column 25)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 66, column 2 to column 36)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 67, column 2 to column 36)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 68, column 2 to column 35)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 69, column 2 to column 37)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 70, column 2 to column 37)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 71, column 2 to column 37)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 72, column 2 to column 31)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 73, column 2 to column 30)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 75, column 2 to column 34)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 76, column 2 to column 44)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 77, column 2 to column 61)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 79, column 8 to column 9)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 79, column 2 to column 32)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 80, column 8 to column 9)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 80, column 2 to column 28)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 81, column 8 to column 9)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 81, column 2 to column 26)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 82, column 8 to column 9)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 82, column 2 to column 26)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 83, column 8 to column 9)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 83, column 2 to column 26)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 86, column 4 to column 38)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 87, column 4 to column 38)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 88, column 4 to column 67)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 89, column 4 to column 36)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 91, column 4 to column 30)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 92, column 4 to column 30)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 94, column 4 to column 32)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 95, column 4 to column 31)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 96, column 4 to column 21)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 98, column 4 to column 46)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 99, column 4 to column 46)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 100, column 4 to column 31)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 102, column 4 to column 45)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 103, column 4 to column 45)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 104, column 4 to column 31)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 85, column 17 to line 105, column 3)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 85, column 2 to line 105, column 3)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 119, column 8 to column 9)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 121, column 8 to column 9)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 159, column 9 to column 10)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 160, column 9 to column 10)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 18, column 10 to column 19)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 18, column 4 to column 44)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 19, column 4 to column 22)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 20, column 4 to column 15)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 21, column 4 to column 18)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 22, column 4 to column 13)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 23, column 4 to column 20)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 26, column 4 to column 46)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 27, column 4 to column 77)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 28, column 4 to column 55)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 29, column 4 to column 30)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 32, column 6 to column 46)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 33, column 6 to column 46)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 34, column 6 to column 78)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 35, column 6 to column 42)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 36, column 6 to column 67)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 37, column 6 to column 66)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 38, column 6 to column 66)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 31, column 27 to line 39, column 5)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 31, column 4 to line 39, column 5)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 41, column 4 to column 24)",
 " (in 'C:/Users/rjrri/DOCUME~1/UNIVER~1/FIRSTP~1/MILKYW~2/rotcurve-bp2_1.stan', line 16, column 96 to line 42, column 3)"};

struct predicted_proper_motions_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            typename T4__, typename T5__, typename T6__, typename T7__,
            typename T8__,
            stan::require_all_t<stan::is_col_vector<T0__>,
                                stan::is_vt_not_complex<T0__>,
                                stan::is_stan_scalar<T1__>,
                                stan::is_col_vector<T2__>,
                                stan::is_vt_not_complex<T2__>,
                                stan::is_stan_scalar<T3__>,
                                stan::is_stan_scalar<T4__>,
                                stan::is_stan_scalar<T5__>,
                                stan::is_stan_scalar<T6__>,
                                stan::is_stan_scalar<T7__>,
                                stan::is_col_vector<T8__>,
                                stan::is_vt_not_complex<T8__>>* = nullptr>
  std::vector<Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, stan::base_type_t<T2__>,
                       T3__, T4__,
                       stan::promote_args_t<T5__, T6__, T7__,
                                            stan::base_type_t<T8__>>>, -1, 1>>
  operator()(const T0__& plx, const std::vector<Eigen::Matrix<T1__, -1, 1>>& r,
             const T2__& sunpos, const T3__& h_param, const T4__& p_param,
             const std::vector<Eigen::Matrix<T5__, -1, 1>>& p,
             const std::vector<Eigen::Matrix<T6__, -1, 1>>& q, const T7__& Av,
             const T8__& Vsun_pec, std::ostream* pstream__) const;
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__, typename T7__,
          typename T8__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>,
                              stan::is_stan_scalar<T6__>,
                              stan::is_stan_scalar<T7__>,
                              stan::is_col_vector<T8__>,
                              stan::is_vt_not_complex<T8__>>* = nullptr>
  std::vector<Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, stan::base_type_t<T2__>,
                     T3__, T4__,
                     stan::promote_args_t<T5__, T6__, T7__,
                                          stan::base_type_t<T8__>>>, -1, 1>>
  predicted_proper_motions(const T0__& plx_arg__,
                           const std::vector<Eigen::Matrix<T1__, -1, 1>>& r,
                           const T2__& sunpos_arg__, const T3__& h_param,
                           const T4__& p_param,
                           const std::vector<Eigen::Matrix<T5__, -1, 1>>& p,
                           const std::vector<Eigen::Matrix<T6__, -1, 1>>& q,
                           const T7__& Av, const T8__& Vsun_pec_arg__,
                           std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::base_type_t<T0__>, T1__,
                                 stan::base_type_t<T2__>, T3__, T4__,
                                 stan::promote_args_t<T5__, T6__, T7__,
                                                      stan::base_type_t<T8__>>>;
    int current_statement__ = 0; 
    const auto& plx = stan::math::to_ref(plx_arg__);
    const auto& sunpos = stan::math::to_ref(sunpos_arg__);
    const auto& Vsun_pec = stan::math::to_ref(Vsun_pec_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 112;
      stan::math::validate_non_negative_index("predicted_pm", "size(plx)",
                                              stan::math::size(plx));
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> predicted_pm =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(
           stan::math::size(plx), 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__));
      Eigen::Matrix<local_scalar_t__, -1, 1> starpos =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(3, DUMMY_VAR__);
      local_scalar_t__ Rstar = DUMMY_VAR__;
      local_scalar_t__ vphistar = DUMMY_VAR__;
      local_scalar_t__ phi = DUMMY_VAR__;
      Eigen::Matrix<local_scalar_t__, -1, 1> vdiff =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(3, DUMMY_VAR__);
      local_scalar_t__ Rsun = DUMMY_VAR__;
      current_statement__ = 119;
      Rsun = stan::math::sqrt(
               (stan::math::pow(
                  stan::model::rvalue(sunpos, "sunpos",
                    stan::model::index_uni(1)), 2) +
                 stan::math::pow(
                   stan::model::rvalue(sunpos, "sunpos",
                     stan::model::index_uni(2)), 2)));
      local_scalar_t__ Vcirc_sun = DUMMY_VAR__;
      current_statement__ = 120;
      Vcirc_sun = ((Rsun / h_param) *
                    stan::math::pow(
                      (1 + stan::math::pow((Rsun / h_param), 2)),
                      ((p_param - 2) / 4)));
      Eigen::Matrix<local_scalar_t__, -1, 1> Vsun =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(3, DUMMY_VAR__);
      current_statement__ = 121;
      stan::model::assign(Vsun,
        stan::math::add((Eigen::Matrix<local_scalar_t__,-1,1>(3) << 0.0,
          Vcirc_sun, 0.0).finished(), Vsun_pec), "assigning variable Vsun");
      local_scalar_t__ v0 = DUMMY_VAR__;
      current_statement__ = 122;
      v0 = (234.0 / Vcirc_sun);
      current_statement__ = 131;
      for (int i = 1; i <= stan::math::size(plx); ++i) {
        current_statement__ = 123;
        stan::model::assign(starpos,
          stan::math::add(
            stan::math::multiply(
              (1000.0 /
                stan::model::rvalue(plx, "plx", stan::model::index_uni(i))),
              stan::model::rvalue(r, "r", stan::model::index_uni(i))),
            sunpos), "assigning variable starpos");
        current_statement__ = 124;
        Rstar = stan::math::sqrt(
                  (stan::math::pow(
                     stan::model::rvalue(starpos, "starpos",
                       stan::model::index_uni(1)), 2) +
                    stan::math::pow(
                      stan::model::rvalue(starpos, "starpos",
                        stan::model::index_uni(2)), 2)));
        current_statement__ = 125;
        vphistar = (((v0 * Rstar) / h_param) *
                     stan::math::pow(
                       (1 + stan::math::pow((Rstar / h_param), 2)),
                       ((p_param - 2) / 4)));
        current_statement__ = 126;
        phi = stan::math::atan2(
                stan::model::rvalue(starpos, "starpos",
                  stan::model::index_uni(2)),
                stan::model::rvalue(starpos, "starpos",
                  stan::model::index_uni(1)));
        current_statement__ = 127;
        stan::model::assign(vdiff,
          stan::math::subtract((Eigen::Matrix<local_scalar_t__,-1,1>(3) <<
            (-vphistar * stan::math::sin(phi)),
            (vphistar * stan::math::cos(phi)), 0.0).finished(), Vsun),
          "assigning variable vdiff");
        current_statement__ = 128;
        stan::model::assign(predicted_pm,
          ((stan::math::dot_product(
              stan::model::rvalue(p, "p", stan::model::index_uni(i)), vdiff)
             * stan::model::rvalue(plx, "plx", stan::model::index_uni(i))) /
            Av),
          "assigning variable predicted_pm", stan::model::index_uni(i),
                                               stan::model::index_uni(1));
        current_statement__ = 129;
        stan::model::assign(predicted_pm,
          ((stan::math::dot_product(
              stan::model::rvalue(q, "q", stan::model::index_uni(i)), vdiff)
             * stan::model::rvalue(plx, "plx", stan::model::index_uni(i))) /
            Av),
          "assigning variable predicted_pm", stan::model::index_uni(i),
                                               stan::model::index_uni(2));
      }
      current_statement__ = 132;
      return predicted_pm;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__, typename T7__,
          typename T8__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>,
                              stan::is_stan_scalar<T6__>,
                              stan::is_stan_scalar<T7__>,
                              stan::is_col_vector<T8__>,
                              stan::is_vt_not_complex<T8__>>*>
std::vector<Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, stan::base_type_t<T2__>,
                     T3__, T4__,
                     stan::promote_args_t<T5__, T6__, T7__,
                                          stan::base_type_t<T8__>>>, -1, 1>>
predicted_proper_motions_functor__::operator()(const T0__& plx,
                                               const std::vector<Eigen::Matrix<T1__, -1, 1>>& r,
                                               const T2__& sunpos,
                                               const T3__& h_param,
                                               const T4__& p_param,
                                               const std::vector<Eigen::Matrix<T5__, -1, 1>>& p,
                                               const std::vector<Eigen::Matrix<T6__, -1, 1>>& q,
                                               const T7__& Av,
                                               const T8__& Vsun_pec,
                                               std::ostream* pstream__) 
const
{
  return predicted_proper_motions(plx, r, sunpos, h_param, p_param, p, q, Av,
           Vsun_pec, pstream__);
}


class rotcurve_bp2_1_model final : public model_base_crtp<rotcurve_bp2_1_model> {

 private:
  int N;
  Eigen::Matrix<double, -1, 1> galon_data__;
  Eigen::Matrix<double, -1, 1> galat_data__;
  Eigen::Matrix<double, -1, 1> pml_obs_data__;
  Eigen::Matrix<double, -1, 1> pml_obs_unc_data__;
  Eigen::Matrix<double, -1, 1> pmb_obs_data__;
  Eigen::Matrix<double, -1, 1> pmb_obs_unc_data__;
  Eigen::Matrix<double, -1, 1> pml_pmb_corr_data__;
  Eigen::Matrix<double, -1, 1> plx_obs_data__;
  double Rsun;
  double Zsun;
  double Ysun;
  double h_param_prior_alpha;
  double h_param_prior_beta;
  double p_param_mean;
  double p_param_sigma;
  double Vsun_pec_x_prior_mean;
  double Vsun_pec_y_prior_mean;
  double Vsun_pec_z_prior_mean;
  double Vsun_pec_x_prior_sigma;
  double Vsun_pec_y_prior_sigma;
  double Vsun_pec_z_prior_sigma;
  double vdisp_prior_alpha;
  double vdisp_prior_beta;
  double auInMeter;
  double julianYearSeconds;
  double auKmYearPerSec;
  std::vector<Eigen::Matrix<double, -1, -1>> cov_pm;
  std::vector<Eigen::Matrix<double, -1, 1>> pm_obs;
  std::vector<Eigen::Matrix<double, -1, 1>> pvec;
  std::vector<Eigen::Matrix<double, -1, 1>> qvec;
  std::vector<Eigen::Matrix<double, -1, 1>> rvec; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> galon{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> galat{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> pml_obs{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> pml_obs_unc{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> pmb_obs{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> pmb_obs_unc{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> pml_pmb_corr{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> plx_obs{nullptr, 0};
 
 public:
  ~rotcurve_bp2_1_model() { }
  
  inline std::string model_name() const final { return "rotcurve_bp2_1_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.31.0", "stancflags = "};
  }
  
  
  rotcurve_bp2_1_model(stan::io::var_context& context__,
                       unsigned int random_seed__ = 0,
                       std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "rotcurve_bp2_1_model_namespace::rotcurve_bp2_1_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 46;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      
      current_statement__ = 46;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 46;
      stan::math::check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 47;
      stan::math::validate_non_negative_index("galon", "N", N);
      current_statement__ = 48;
      context__.validate_dims("data initialization","galon","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      galon_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&galon) Eigen::Map<Eigen::Matrix<double, -1, 1>>(galon_data__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> galon_flat__;
        current_statement__ = 48;
        galon_flat__ = context__.vals_r("galon");
        current_statement__ = 48;
        pos__ = 1;
        current_statement__ = 48;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 48;
          stan::model::assign(galon, galon_flat__[(pos__ - 1)],
            "assigning variable galon", stan::model::index_uni(sym1__));
          current_statement__ = 48;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 49;
      stan::math::validate_non_negative_index("galat", "N", N);
      current_statement__ = 50;
      context__.validate_dims("data initialization","galat","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      galat_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&galat) Eigen::Map<Eigen::Matrix<double, -1, 1>>(galat_data__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> galat_flat__;
        current_statement__ = 50;
        galat_flat__ = context__.vals_r("galat");
        current_statement__ = 50;
        pos__ = 1;
        current_statement__ = 50;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 50;
          stan::model::assign(galat, galat_flat__[(pos__ - 1)],
            "assigning variable galat", stan::model::index_uni(sym1__));
          current_statement__ = 50;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 51;
      stan::math::validate_non_negative_index("pml_obs", "N", N);
      current_statement__ = 52;
      context__.validate_dims("data initialization","pml_obs","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      pml_obs_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&pml_obs) Eigen::Map<Eigen::Matrix<double, -1, 1>>(pml_obs_data__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> pml_obs_flat__;
        current_statement__ = 52;
        pml_obs_flat__ = context__.vals_r("pml_obs");
        current_statement__ = 52;
        pos__ = 1;
        current_statement__ = 52;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 52;
          stan::model::assign(pml_obs, pml_obs_flat__[(pos__ - 1)],
            "assigning variable pml_obs", stan::model::index_uni(sym1__));
          current_statement__ = 52;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 53;
      stan::math::validate_non_negative_index("pml_obs_unc", "N", N);
      current_statement__ = 54;
      context__.validate_dims("data initialization","pml_obs_unc","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      pml_obs_unc_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&pml_obs_unc) Eigen::Map<Eigen::Matrix<double, -1, 1>>(pml_obs_unc_data__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> pml_obs_unc_flat__;
        current_statement__ = 54;
        pml_obs_unc_flat__ = context__.vals_r("pml_obs_unc");
        current_statement__ = 54;
        pos__ = 1;
        current_statement__ = 54;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 54;
          stan::model::assign(pml_obs_unc, pml_obs_unc_flat__[(pos__ - 1)],
            "assigning variable pml_obs_unc", stan::model::index_uni(sym1__));
          current_statement__ = 54;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 55;
      stan::math::validate_non_negative_index("pmb_obs", "N", N);
      current_statement__ = 56;
      context__.validate_dims("data initialization","pmb_obs","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      pmb_obs_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&pmb_obs) Eigen::Map<Eigen::Matrix<double, -1, 1>>(pmb_obs_data__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> pmb_obs_flat__;
        current_statement__ = 56;
        pmb_obs_flat__ = context__.vals_r("pmb_obs");
        current_statement__ = 56;
        pos__ = 1;
        current_statement__ = 56;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 56;
          stan::model::assign(pmb_obs, pmb_obs_flat__[(pos__ - 1)],
            "assigning variable pmb_obs", stan::model::index_uni(sym1__));
          current_statement__ = 56;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 57;
      stan::math::validate_non_negative_index("pmb_obs_unc", "N", N);
      current_statement__ = 58;
      context__.validate_dims("data initialization","pmb_obs_unc","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      pmb_obs_unc_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&pmb_obs_unc) Eigen::Map<Eigen::Matrix<double, -1, 1>>(pmb_obs_unc_data__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> pmb_obs_unc_flat__;
        current_statement__ = 58;
        pmb_obs_unc_flat__ = context__.vals_r("pmb_obs_unc");
        current_statement__ = 58;
        pos__ = 1;
        current_statement__ = 58;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 58;
          stan::model::assign(pmb_obs_unc, pmb_obs_unc_flat__[(pos__ - 1)],
            "assigning variable pmb_obs_unc", stan::model::index_uni(sym1__));
          current_statement__ = 58;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 59;
      stan::math::validate_non_negative_index("pml_pmb_corr", "N", N);
      current_statement__ = 60;
      context__.validate_dims("data initialization","pml_pmb_corr","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      pml_pmb_corr_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&pml_pmb_corr) Eigen::Map<Eigen::Matrix<double, -1, 1>>(pml_pmb_corr_data__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> pml_pmb_corr_flat__;
        current_statement__ = 60;
        pml_pmb_corr_flat__ = context__.vals_r("pml_pmb_corr");
        current_statement__ = 60;
        pos__ = 1;
        current_statement__ = 60;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 60;
          stan::model::assign(pml_pmb_corr, pml_pmb_corr_flat__[(pos__ - 1)],
            "assigning variable pml_pmb_corr", stan::model::index_uni(sym1__));
          current_statement__ = 60;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 61;
      stan::math::validate_non_negative_index("plx_obs", "N", N);
      current_statement__ = 62;
      context__.validate_dims("data initialization","plx_obs","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      plx_obs_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&plx_obs) Eigen::Map<Eigen::Matrix<double, -1, 1>>(plx_obs_data__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> plx_obs_flat__;
        current_statement__ = 62;
        plx_obs_flat__ = context__.vals_r("plx_obs");
        current_statement__ = 62;
        pos__ = 1;
        current_statement__ = 62;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 62;
          stan::model::assign(plx_obs, plx_obs_flat__[(pos__ - 1)],
            "assigning variable plx_obs", stan::model::index_uni(sym1__));
          current_statement__ = 62;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 63;
      context__.validate_dims("data initialization","Rsun","double",
           std::vector<size_t>{});
      Rsun = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 63;
      Rsun = context__.vals_r("Rsun")[(1 - 1)];
      current_statement__ = 64;
      context__.validate_dims("data initialization","Zsun","double",
           std::vector<size_t>{});
      Zsun = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 64;
      Zsun = context__.vals_r("Zsun")[(1 - 1)];
      current_statement__ = 65;
      Ysun = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 65;
      Ysun = 0.0;
      current_statement__ = 66;
      h_param_prior_alpha = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 66;
      h_param_prior_alpha = 1.1;
      current_statement__ = 67;
      h_param_prior_beta = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 67;
      h_param_prior_beta = 10;
      current_statement__ = 68;
      p_param_mean = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 68;
      p_param_mean = -0.5;
      current_statement__ = 69;
      p_param_sigma = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 69;
      p_param_sigma = 3;
      current_statement__ = 70;
      Vsun_pec_x_prior_mean = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 70;
      Vsun_pec_x_prior_mean = 11.0;
      current_statement__ = 71;
      Vsun_pec_y_prior_mean = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 71;
      Vsun_pec_y_prior_mean = 12.0;
      current_statement__ = 72;
      Vsun_pec_z_prior_mean = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 72;
      Vsun_pec_z_prior_mean = 7.0;
      current_statement__ = 73;
      Vsun_pec_x_prior_sigma = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 73;
      Vsun_pec_x_prior_sigma = 20.0;
      current_statement__ = 74;
      Vsun_pec_y_prior_sigma = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 74;
      Vsun_pec_y_prior_sigma = 20.0;
      current_statement__ = 75;
      Vsun_pec_z_prior_sigma = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 75;
      Vsun_pec_z_prior_sigma = 20.0;
      current_statement__ = 76;
      vdisp_prior_alpha = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 76;
      vdisp_prior_alpha = 2.0;
      current_statement__ = 77;
      vdisp_prior_beta = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 77;
      vdisp_prior_beta = 0.1;
      current_statement__ = 78;
      auInMeter = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 78;
      auInMeter = 149597870700.0;
      current_statement__ = 79;
      julianYearSeconds = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 79;
      julianYearSeconds = (365.25 * 86400.0);
      current_statement__ = 80;
      auKmYearPerSec = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 80;
      auKmYearPerSec = (auInMeter / (julianYearSeconds * 1000.0));
      current_statement__ = 81;
      stan::math::validate_non_negative_index("cov_pm", "N", N);
      current_statement__ = 82;
      cov_pm = 
        std::vector<Eigen::Matrix<double, -1, -1>>(N, 
          Eigen::Matrix<double, -1, -1>::Constant(2, 2,
            std::numeric_limits<double>::quiet_NaN()));
      
      
      current_statement__ = 83;
      stan::math::validate_non_negative_index("pm_obs", "N", N);
      current_statement__ = 84;
      pm_obs = 
        std::vector<Eigen::Matrix<double, -1, 1>>(N, 
          Eigen::Matrix<double, -1, 1>::Constant(2,
            std::numeric_limits<double>::quiet_NaN()));
      
      
      current_statement__ = 85;
      stan::math::validate_non_negative_index("pvec", "N", N);
      current_statement__ = 86;
      pvec = 
        std::vector<Eigen::Matrix<double, -1, 1>>(N, 
          Eigen::Matrix<double, -1, 1>::Constant(3,
            std::numeric_limits<double>::quiet_NaN()));
      
      
      current_statement__ = 87;
      stan::math::validate_non_negative_index("qvec", "N", N);
      current_statement__ = 88;
      qvec = 
        std::vector<Eigen::Matrix<double, -1, 1>>(N, 
          Eigen::Matrix<double, -1, 1>::Constant(3,
            std::numeric_limits<double>::quiet_NaN()));
      
      
      current_statement__ = 89;
      stan::math::validate_non_negative_index("rvec", "N", N);
      current_statement__ = 90;
      rvec = 
        std::vector<Eigen::Matrix<double, -1, 1>>(N, 
          Eigen::Matrix<double, -1, 1>::Constant(3,
            std::numeric_limits<double>::quiet_NaN()));
      
      
      current_statement__ = 107;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 91;
        stan::model::assign(cov_pm,
          stan::math::pow(
            stan::model::rvalue(pml_obs_unc, "pml_obs_unc",
              stan::model::index_uni(n)), 2),
          "assigning variable cov_pm", stan::model::index_uni(n),
                                         stan::model::index_uni(1),
                                         stan::model::index_uni(1));
        current_statement__ = 92;
        stan::model::assign(cov_pm,
          stan::math::pow(
            stan::model::rvalue(pmb_obs_unc, "pmb_obs_unc",
              stan::model::index_uni(n)), 2),
          "assigning variable cov_pm", stan::model::index_uni(n),
                                         stan::model::index_uni(2),
                                         stan::model::index_uni(2));
        current_statement__ = 93;
        stan::model::assign(cov_pm,
          ((stan::model::rvalue(pml_obs_unc, "pml_obs_unc",
              stan::model::index_uni(n)) *
             stan::model::rvalue(pmb_obs_unc, "pmb_obs_unc",
               stan::model::index_uni(n))) *
            stan::model::rvalue(pml_pmb_corr, "pml_pmb_corr",
              stan::model::index_uni(n))),
          "assigning variable cov_pm", stan::model::index_uni(n),
                                         stan::model::index_uni(1),
                                         stan::model::index_uni(2));
        current_statement__ = 94;
        stan::model::assign(cov_pm,
          stan::model::rvalue(
            stan::model::rvalue(cov_pm, "cov_pm", stan::model::index_uni(n)),
            "cov_pm[n]",
            stan::model::index_uni(1), stan::model::index_uni(2)),
          "assigning variable cov_pm", stan::model::index_uni(n),
                                         stan::model::index_uni(2),
                                         stan::model::index_uni(1));
        current_statement__ = 95;
        stan::model::assign(pm_obs,
          stan::model::rvalue(pml_obs, "pml_obs", stan::model::index_uni(n)),
          "assigning variable pm_obs", stan::model::index_uni(n),
                                         stan::model::index_uni(1));
        current_statement__ = 96;
        stan::model::assign(pm_obs,
          stan::model::rvalue(pmb_obs, "pmb_obs", stan::model::index_uni(n)),
          "assigning variable pm_obs", stan::model::index_uni(n),
                                         stan::model::index_uni(2));
        current_statement__ = 97;
        stan::model::assign(pvec,
          -stan::math::sin(
             stan::model::rvalue(galon, "galon", stan::model::index_uni(n))),
          "assigning variable pvec", stan::model::index_uni(n),
                                       stan::model::index_uni(1));
        current_statement__ = 98;
        stan::model::assign(pvec,
          stan::math::cos(
            stan::model::rvalue(galon, "galon", stan::model::index_uni(n))),
          "assigning variable pvec", stan::model::index_uni(n),
                                       stan::model::index_uni(2));
        current_statement__ = 99;
        stan::model::assign(pvec, 0.0,
          "assigning variable pvec", stan::model::index_uni(n),
                                       stan::model::index_uni(3));
        current_statement__ = 100;
        stan::model::assign(qvec,
          (-stan::math::sin(
              stan::model::rvalue(galat, "galat", stan::model::index_uni(n)))
            *
            stan::math::cos(
              stan::model::rvalue(galon, "galon", stan::model::index_uni(n)))),
          "assigning variable qvec", stan::model::index_uni(n),
                                       stan::model::index_uni(1));
        current_statement__ = 101;
        stan::model::assign(qvec,
          (-stan::math::sin(
              stan::model::rvalue(galat, "galat", stan::model::index_uni(n)))
            *
            stan::math::sin(
              stan::model::rvalue(galon, "galon", stan::model::index_uni(n)))),
          "assigning variable qvec", stan::model::index_uni(n),
                                       stan::model::index_uni(2));
        current_statement__ = 102;
        stan::model::assign(qvec,
          stan::math::cos(
            stan::model::rvalue(galat, "galat", stan::model::index_uni(n))),
          "assigning variable qvec", stan::model::index_uni(n),
                                       stan::model::index_uni(3));
        current_statement__ = 103;
        stan::model::assign(rvec,
          (stan::math::cos(
             stan::model::rvalue(galat, "galat", stan::model::index_uni(n)))
            *
            stan::math::cos(
              stan::model::rvalue(galon, "galon", stan::model::index_uni(n)))),
          "assigning variable rvec", stan::model::index_uni(n),
                                       stan::model::index_uni(1));
        current_statement__ = 104;
        stan::model::assign(rvec,
          (stan::math::cos(
             stan::model::rvalue(galat, "galat", stan::model::index_uni(n)))
            *
            stan::math::sin(
              stan::model::rvalue(galon, "galon", stan::model::index_uni(n)))),
          "assigning variable rvec", stan::model::index_uni(n),
                                       stan::model::index_uni(2));
        current_statement__ = 105;
        stan::model::assign(rvec,
          stan::math::sin(
            stan::model::rvalue(galat, "galat", stan::model::index_uni(n))),
          "assigning variable rvec", stan::model::index_uni(n),
                                       stan::model::index_uni(3));
      }
      current_statement__ = 82;
      stan::math::check_cov_matrix(function__, "cov_pm", cov_pm);
      current_statement__ = 108;
      stan::math::validate_non_negative_index("model_pm", "N", N);
      current_statement__ = 109;
      stan::math::validate_non_negative_index("dcov", "N", N);
      current_statement__ = 110;
      stan::math::validate_non_negative_index("pred_pml", "N", N);
      current_statement__ = 111;
      stan::math::validate_non_negative_index("pred_pmb", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + 1 + 1 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "rotcurve_bp2_1_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ h_param = DUMMY_VAR__;
      current_statement__ = 1;
      h_param = in__.template read_constrain_lb<local_scalar_t__, 
                  jacobian__>(0, lp__);
      local_scalar_t__ p_param = DUMMY_VAR__;
      current_statement__ = 2;
      p_param = in__.template read<local_scalar_t__>();
      local_scalar_t__ Vsun_pec_x = DUMMY_VAR__;
      current_statement__ = 3;
      Vsun_pec_x = in__.template read<local_scalar_t__>();
      local_scalar_t__ Vsun_pec_y = DUMMY_VAR__;
      current_statement__ = 4;
      Vsun_pec_y = in__.template read<local_scalar_t__>();
      local_scalar_t__ Vsun_pec_z = DUMMY_VAR__;
      current_statement__ = 5;
      Vsun_pec_z = in__.template read<local_scalar_t__>();
      local_scalar_t__ vdispxy = DUMMY_VAR__;
      current_statement__ = 6;
      vdispxy = in__.template read<local_scalar_t__>();
      local_scalar_t__ vdispz = DUMMY_VAR__;
      current_statement__ = 7;
      vdispz = in__.template read<local_scalar_t__>();
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> model_pm =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__));
      Eigen::Matrix<local_scalar_t__, -1, -1> scov =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(3, 3, DUMMY_VAR__);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> dcov =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(N, 
           Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(2, 2,
             DUMMY_VAR__));
      current_statement__ = 11;
      stan::model::assign(scov, stan::math::pow(vdispxy, 2),
        "assigning variable scov", stan::model::index_uni(1),
                                     stan::model::index_uni(1));
      current_statement__ = 12;
      stan::model::assign(scov, stan::math::pow(vdispxy, 2),
        "assigning variable scov", stan::model::index_uni(2),
                                     stan::model::index_uni(2));
      current_statement__ = 13;
      stan::model::assign(scov, stan::math::pow(vdispz, 2),
        "assigning variable scov", stan::model::index_uni(3),
                                     stan::model::index_uni(3));
      current_statement__ = 14;
      stan::model::assign(scov, 0.0,
        "assigning variable scov", stan::model::index_uni(1),
                                     stan::model::index_uni(2));
      current_statement__ = 15;
      stan::model::assign(scov, 0.0,
        "assigning variable scov", stan::model::index_uni(1),
                                     stan::model::index_uni(3));
      current_statement__ = 16;
      stan::model::assign(scov, 0.0,
        "assigning variable scov", stan::model::index_uni(2),
                                     stan::model::index_uni(3));
      current_statement__ = 17;
      stan::model::assign(scov,
        stan::model::rvalue(scov, "scov",
          stan::model::index_uni(1), stan::model::index_uni(2)),
        "assigning variable scov", stan::model::index_uni(2),
                                     stan::model::index_uni(1));
      current_statement__ = 18;
      stan::model::assign(scov,
        stan::model::rvalue(scov, "scov",
          stan::model::index_uni(1), stan::model::index_uni(3)),
        "assigning variable scov", stan::model::index_uni(3),
                                     stan::model::index_uni(1));
      current_statement__ = 19;
      stan::model::assign(scov,
        stan::model::rvalue(scov, "scov",
          stan::model::index_uni(2), stan::model::index_uni(3)),
        "assigning variable scov", stan::model::index_uni(3),
                                     stan::model::index_uni(2));
      current_statement__ = 26;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 20;
        stan::model::assign(dcov,
          stan::math::dot_product(
            stan::model::rvalue(pvec, "pvec", stan::model::index_uni(n)),
            stan::math::multiply(scov,
              stan::model::rvalue(pvec, "pvec", stan::model::index_uni(n)))),
          "assigning variable dcov", stan::model::index_uni(n),
                                       stan::model::index_uni(1),
                                       stan::model::index_uni(1));
        current_statement__ = 21;
        stan::model::assign(dcov,
          stan::math::dot_product(
            stan::model::rvalue(qvec, "qvec", stan::model::index_uni(n)),
            stan::math::multiply(scov,
              stan::model::rvalue(pvec, "pvec", stan::model::index_uni(n)))),
          "assigning variable dcov", stan::model::index_uni(n),
                                       stan::model::index_uni(2),
                                       stan::model::index_uni(1));
        current_statement__ = 22;
        stan::model::assign(dcov,
          stan::math::dot_product(
            stan::model::rvalue(pvec, "pvec", stan::model::index_uni(n)),
            stan::math::multiply(scov,
              stan::model::rvalue(qvec, "qvec", stan::model::index_uni(n)))),
          "assigning variable dcov", stan::model::index_uni(n),
                                       stan::model::index_uni(1),
                                       stan::model::index_uni(2));
        current_statement__ = 23;
        stan::model::assign(dcov,
          stan::math::dot_product(
            stan::model::rvalue(qvec, "qvec", stan::model::index_uni(n)),
            stan::math::multiply(scov,
              stan::model::rvalue(qvec, "qvec", stan::model::index_uni(n)))),
          "assigning variable dcov", stan::model::index_uni(n),
                                       stan::model::index_uni(2),
                                       stan::model::index_uni(2));
        current_statement__ = 24;
        stan::model::assign(dcov,
          stan::math::add(
            stan::model::rvalue(cov_pm, "cov_pm", stan::model::index_uni(n)),
            stan::math::multiply(
              stan::math::pow(
                (stan::model::rvalue(plx_obs, "plx_obs",
                   stan::model::index_uni(n)) / auKmYearPerSec), 2),
              stan::model::deep_copy(
                stan::model::rvalue(dcov, "dcov", stan::model::index_uni(n))))),
          "assigning variable dcov", stan::model::index_uni(n));
      }
      current_statement__ = 27;
      stan::model::assign(model_pm,
        predicted_proper_motions(plx_obs, rvec,
          (Eigen::Matrix<double,-1,1>(3) << -Rsun, Ysun, Zsun).finished(),
          h_param, p_param, pvec, qvec, auKmYearPerSec,
          (Eigen::Matrix<local_scalar_t__,-1,1>(3) << Vsun_pec_x, Vsun_pec_y,
          Vsun_pec_z).finished(), pstream__), "assigning variable model_pm");
      current_statement__ = 9;
      stan::math::check_cov_matrix(function__, "scov", scov);
      current_statement__ = 10;
      stan::math::check_cov_matrix(function__, "dcov", dcov);
      {
        current_statement__ = 36;
        lp_accum__.add(
          stan::math::gamma_lpdf<propto__>(h_param, h_param_prior_alpha,
            h_param_prior_beta));
        current_statement__ = 37;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(p_param, p_param_mean,
            p_param_sigma));
        current_statement__ = 38;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(Vsun_pec_x,
            Vsun_pec_x_prior_mean, Vsun_pec_x_prior_sigma));
        current_statement__ = 39;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(Vsun_pec_y,
            Vsun_pec_y_prior_mean, Vsun_pec_y_prior_sigma));
        current_statement__ = 40;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(Vsun_pec_z,
            Vsun_pec_z_prior_mean, Vsun_pec_z_prior_sigma));
        current_statement__ = 41;
        lp_accum__.add(
          stan::math::gamma_lpdf<propto__>(vdispxy, vdisp_prior_alpha,
            vdisp_prior_beta));
        current_statement__ = 42;
        lp_accum__.add(
          stan::math::gamma_lpdf<propto__>(vdispz, vdisp_prior_alpha,
            vdisp_prior_beta));
        current_statement__ = 45;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 43;
          lp_accum__.add(
            stan::math::multi_normal_lpdf<propto__>(
              stan::model::rvalue(pm_obs, "pm_obs",
                stan::model::index_uni(i)),
              stan::model::rvalue(model_pm, "model_pm",
                stan::model::index_uni(i)),
              stan::model::rvalue(dcov, "dcov", stan::model::index_uni(i))));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "rotcurve_bp2_1_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double h_param = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      h_param = in__.template read_constrain_lb<local_scalar_t__, 
                  jacobian__>(0, lp__);
      double p_param = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      p_param = in__.template read<local_scalar_t__>();
      double Vsun_pec_x = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      Vsun_pec_x = in__.template read<local_scalar_t__>();
      double Vsun_pec_y = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      Vsun_pec_y = in__.template read<local_scalar_t__>();
      double Vsun_pec_z = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      Vsun_pec_z = in__.template read<local_scalar_t__>();
      double vdispxy = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      vdispxy = in__.template read<local_scalar_t__>();
      double vdispz = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      vdispz = in__.template read<local_scalar_t__>();
      std::vector<Eigen::Matrix<double, -1, 1>> model_pm =
         std::vector<Eigen::Matrix<double, -1, 1>>(N, 
           Eigen::Matrix<double, -1, 1>::Constant(2,
             std::numeric_limits<double>::quiet_NaN()));
      Eigen::Matrix<double, -1, -1> scov =
         Eigen::Matrix<double, -1, -1>::Constant(3, 3,
           std::numeric_limits<double>::quiet_NaN());
      std::vector<Eigen::Matrix<double, -1, -1>> dcov =
         std::vector<Eigen::Matrix<double, -1, -1>>(N, 
           Eigen::Matrix<double, -1, -1>::Constant(2, 2,
             std::numeric_limits<double>::quiet_NaN()));
      out__.write(h_param);
      out__.write(p_param);
      out__.write(Vsun_pec_x);
      out__.write(Vsun_pec_y);
      out__.write(Vsun_pec_z);
      out__.write(vdispxy);
      out__.write(vdispz);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 11;
      stan::model::assign(scov, stan::math::pow(vdispxy, 2),
        "assigning variable scov", stan::model::index_uni(1),
                                     stan::model::index_uni(1));
      current_statement__ = 12;
      stan::model::assign(scov, stan::math::pow(vdispxy, 2),
        "assigning variable scov", stan::model::index_uni(2),
                                     stan::model::index_uni(2));
      current_statement__ = 13;
      stan::model::assign(scov, stan::math::pow(vdispz, 2),
        "assigning variable scov", stan::model::index_uni(3),
                                     stan::model::index_uni(3));
      current_statement__ = 14;
      stan::model::assign(scov, 0.0,
        "assigning variable scov", stan::model::index_uni(1),
                                     stan::model::index_uni(2));
      current_statement__ = 15;
      stan::model::assign(scov, 0.0,
        "assigning variable scov", stan::model::index_uni(1),
                                     stan::model::index_uni(3));
      current_statement__ = 16;
      stan::model::assign(scov, 0.0,
        "assigning variable scov", stan::model::index_uni(2),
                                     stan::model::index_uni(3));
      current_statement__ = 17;
      stan::model::assign(scov,
        stan::model::rvalue(scov, "scov",
          stan::model::index_uni(1), stan::model::index_uni(2)),
        "assigning variable scov", stan::model::index_uni(2),
                                     stan::model::index_uni(1));
      current_statement__ = 18;
      stan::model::assign(scov,
        stan::model::rvalue(scov, "scov",
          stan::model::index_uni(1), stan::model::index_uni(3)),
        "assigning variable scov", stan::model::index_uni(3),
                                     stan::model::index_uni(1));
      current_statement__ = 19;
      stan::model::assign(scov,
        stan::model::rvalue(scov, "scov",
          stan::model::index_uni(2), stan::model::index_uni(3)),
        "assigning variable scov", stan::model::index_uni(3),
                                     stan::model::index_uni(2));
      current_statement__ = 26;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 20;
        stan::model::assign(dcov,
          stan::math::dot_product(
            stan::model::rvalue(pvec, "pvec", stan::model::index_uni(n)),
            stan::math::multiply(scov,
              stan::model::rvalue(pvec, "pvec", stan::model::index_uni(n)))),
          "assigning variable dcov", stan::model::index_uni(n),
                                       stan::model::index_uni(1),
                                       stan::model::index_uni(1));
        current_statement__ = 21;
        stan::model::assign(dcov,
          stan::math::dot_product(
            stan::model::rvalue(qvec, "qvec", stan::model::index_uni(n)),
            stan::math::multiply(scov,
              stan::model::rvalue(pvec, "pvec", stan::model::index_uni(n)))),
          "assigning variable dcov", stan::model::index_uni(n),
                                       stan::model::index_uni(2),
                                       stan::model::index_uni(1));
        current_statement__ = 22;
        stan::model::assign(dcov,
          stan::math::dot_product(
            stan::model::rvalue(pvec, "pvec", stan::model::index_uni(n)),
            stan::math::multiply(scov,
              stan::model::rvalue(qvec, "qvec", stan::model::index_uni(n)))),
          "assigning variable dcov", stan::model::index_uni(n),
                                       stan::model::index_uni(1),
                                       stan::model::index_uni(2));
        current_statement__ = 23;
        stan::model::assign(dcov,
          stan::math::dot_product(
            stan::model::rvalue(qvec, "qvec", stan::model::index_uni(n)),
            stan::math::multiply(scov,
              stan::model::rvalue(qvec, "qvec", stan::model::index_uni(n)))),
          "assigning variable dcov", stan::model::index_uni(n),
                                       stan::model::index_uni(2),
                                       stan::model::index_uni(2));
        current_statement__ = 24;
        stan::model::assign(dcov,
          stan::math::add(
            stan::model::rvalue(cov_pm, "cov_pm", stan::model::index_uni(n)),
            stan::math::multiply(
              stan::math::pow(
                (stan::model::rvalue(plx_obs, "plx_obs",
                   stan::model::index_uni(n)) / auKmYearPerSec), 2),
              stan::model::deep_copy(
                stan::model::rvalue(dcov, "dcov", stan::model::index_uni(n))))),
          "assigning variable dcov", stan::model::index_uni(n));
      }
      current_statement__ = 27;
      stan::model::assign(model_pm,
        predicted_proper_motions(plx_obs, rvec,
          (Eigen::Matrix<double,-1,1>(3) << -Rsun, Ysun, Zsun).finished(),
          h_param, p_param, pvec, qvec, auKmYearPerSec,
          (Eigen::Matrix<local_scalar_t__,-1,1>(3) << Vsun_pec_x, Vsun_pec_y,
          Vsun_pec_z).finished(), pstream__), "assigning variable model_pm");
      current_statement__ = 9;
      stan::math::check_cov_matrix(function__, "scov", scov);
      current_statement__ = 10;
      stan::math::check_cov_matrix(function__, "dcov", dcov);
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            out__.write(model_pm[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        out__.write(scov);
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
              out__.write(
                stan::model::rvalue(dcov, "dcov",
                  stan::model::index_uni(sym3__),
                    stan::model::index_uni(sym2__),
                    stan::model::index_uni(sym1__)));
            }
          }
        }
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> pred_pml =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> pred_pmb =
         Eigen::Matrix<double, -1, 1>::Constant(N,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> pred_pm =
         Eigen::Matrix<double, -1, 1>::Constant(2,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 35;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 31;
        stan::model::assign(pred_pm,
          stan::math::multi_normal_rng(
            stan::model::rvalue(model_pm, "model_pm",
              stan::model::index_uni(i)),
            stan::model::rvalue(dcov, "dcov", stan::model::index_uni(i)),
            base_rng__), "assigning variable pred_pm");
        current_statement__ = 32;
        stan::model::assign(pred_pml,
          stan::model::rvalue(pred_pm, "pred_pm", stan::model::index_uni(1)),
          "assigning variable pred_pml", stan::model::index_uni(i));
        current_statement__ = 33;
        stan::model::assign(pred_pmb,
          stan::model::rvalue(pred_pm, "pred_pm", stan::model::index_uni(2)),
          "assigning variable pred_pmb", stan::model::index_uni(i));
      }
      out__.write(pred_pml);
      out__.write(pred_pmb);
      out__.write(pred_pm);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ h_param = DUMMY_VAR__;
      h_param = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, h_param);
      local_scalar_t__ p_param = DUMMY_VAR__;
      p_param = in__.read<local_scalar_t__>();
      out__.write(p_param);
      local_scalar_t__ Vsun_pec_x = DUMMY_VAR__;
      Vsun_pec_x = in__.read<local_scalar_t__>();
      out__.write(Vsun_pec_x);
      local_scalar_t__ Vsun_pec_y = DUMMY_VAR__;
      Vsun_pec_y = in__.read<local_scalar_t__>();
      out__.write(Vsun_pec_y);
      local_scalar_t__ Vsun_pec_z = DUMMY_VAR__;
      Vsun_pec_z = in__.read<local_scalar_t__>();
      out__.write(Vsun_pec_z);
      local_scalar_t__ vdispxy = DUMMY_VAR__;
      vdispxy = in__.read<local_scalar_t__>();
      out__.write(vdispxy);
      local_scalar_t__ vdispz = DUMMY_VAR__;
      vdispz = in__.read<local_scalar_t__>();
      out__.write(vdispz);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"h_param", "p_param", "Vsun_pec_x",
      "Vsun_pec_y", "Vsun_pec_z", "vdispxy", "vdispz", "model_pm", "scov",
      "dcov", "pred_pml", "pred_pmb", "pred_pm"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(3), static_cast<size_t>(3)},
      std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(2),
                          static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(2)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "h_param");
    param_names__.emplace_back(std::string() + "p_param");
    param_names__.emplace_back(std::string() + "Vsun_pec_x");
    param_names__.emplace_back(std::string() + "Vsun_pec_y");
    param_names__.emplace_back(std::string() + "Vsun_pec_z");
    param_names__.emplace_back(std::string() + "vdispxy");
    param_names__.emplace_back(std::string() + "vdispz");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "model_pm" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 3; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "scov" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= N; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "dcov" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                } 
              }
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "pred_pml" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "pred_pmb" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "pred_pm" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "h_param");
    param_names__.emplace_back(std::string() + "p_param");
    param_names__.emplace_back(std::string() + "Vsun_pec_x");
    param_names__.emplace_back(std::string() + "Vsun_pec_y");
    param_names__.emplace_back(std::string() + "Vsun_pec_z");
    param_names__.emplace_back(std::string() + "vdispxy");
    param_names__.emplace_back(std::string() + "vdispz");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "model_pm" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= (3 + ((3 * (3 - 1)) / 2)); ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "scov" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= (2 + ((2 * (2 - 1)) / 2)); ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "dcov" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "pred_pml" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "pred_pmb" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "pred_pm" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"h_param\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p_param\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Vsun_pec_x\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Vsun_pec_y\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Vsun_pec_z\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"vdispxy\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"vdispz\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"model_pm\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"scov\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(3) + ",\"cols\":" + std::to_string(3) + "},\"block\":\"transformed_parameters\"},{\"name\":\"dcov\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(2) + ",\"cols\":" + std::to_string(2) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"pred_pml\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"pred_pmb\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"pred_pm\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"h_param\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p_param\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Vsun_pec_x\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Vsun_pec_y\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Vsun_pec_z\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"vdispxy\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"vdispz\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"model_pm\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"scov\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string((3 + ((3 * (3 - 1)) / 2))) + "},\"block\":\"transformed_parameters\"},{\"name\":\"dcov\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string((2 + ((2 * (2 - 1)) / 2))) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"pred_pml\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"pred_pmb\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"},{\"name\":\"pred_pm\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((1 + 1) + 1) + 1) + 1) + 1) + 1);
      const size_t num_transformed = emit_transformed_parameters * 
  (((N * 2) + (3 * 3)) + ((N * 2) * 2));
      const size_t num_gen_quantities = emit_generated_quantities * 
  ((N + N) + 2);
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      std::vector<int> params_i;
      vars = Eigen::Matrix<double, Eigen::Dynamic, 1>::Constant(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((1 + 1) + 1) + 1) + 1) + 1) + 1);
      const size_t num_transformed = emit_transformed_parameters * 
  (((N * 2) + (3 * 3)) + ((N * 2) * 2));
      const size_t num_gen_quantities = emit_generated_quantities * 
  ((N + N) + 2);
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      vars = std::vector<double>(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 7> names__{"h_param", "p_param",
      "Vsun_pec_x", "Vsun_pec_y", "Vsun_pec_z", "vdispxy", "vdispz"};
      const std::array<Eigen::Index, 7> constrain_param_sizes__{1, 1, 
       1, 1, 1, 1, 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
     }; } 
using stan_model = rotcurve_bp2_1_model_namespace::rotcurve_bp2_1_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return rotcurve_bp2_1_model_namespace::profiles__;
}

#endif


